package com.LeShine.test;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * @author LeShine
 * @date: 2018年8月22日 下午4:07:05
 * @version: v1.0.0
 * @explain:反射获取类方法
 */
public class ReflectionMethod {
	public static void main(String[] args) {
		// 获取类
		try {
			Class stuCla = Class.forName("com.LeShine.test.Student");
			// 获取方法数组
			Method[] methods = stuCla.getDeclaredMethods();
			for (Method m : methods) {
				System.out.println(m);
			}

			// 获取特定公共方法
			Method method = stuCla.getMethod("show", null);
			System.out.println(method);
			Object newInstance = stuCla.getDeclaredConstructor().newInstance();
			method.invoke(newInstance, null);
			// 获取私有特定方法
			Method method2 = stuCla.getDeclaredMethod("show", String.class);
			method2.setAccessible(true);
			Object obj = stuCla.getDeclaredConstructor(String.class).newInstance("lalalal");

			// declaredConstructor.setAccessible(true);
			method2.invoke(obj, "我要上天");

		} catch (ClassNotFoundException | NoSuchMethodException | SecurityException | InstantiationException
				| IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
